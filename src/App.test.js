// Generated by CodiumAI
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import App from './App';
describe('code snippet', () => {

  // Renders a header with the text "Users".
  it('should render a header with the text "Users"', () => {
    render(<App />);
    const header = screen.getByRole('heading', { name: /Users/i });
    expect(header).toBeInTheDocument();
  });

  // Renders an input field for adding a new user.
  it('should render an input field for adding a new user', () => {
    render(<App />);
    const input = screen.getByRole('textbox');
    expect(input).toBeInTheDocument();
  });

  // Renders a button for adding a new user.
  it('should render a button for adding a new user', () => {
    render(<App />);
    const button = screen.getByRole('button', { name: /Add User/i });
    expect(button).toBeInTheDocument();
  });

  // Does not add a new user to the list when the "Add User" button is clicked and the input field only contains whitespace.
  it('should not add a new user to the list when the "Add User" button is clicked and the input field only contains whitespace', () => {
    render(<App />);
    const button = screen.getByRole('button', { name: /Add User/i });
    const input = screen.getByRole('textbox');
    const usersList = screen.getByRole('list');

    fireEvent.change(input, { target: { value: ' ' } });
    fireEvent.click(button);

    expect(usersList.children.length).toBe(0);
  });

  // Handles errors when fetching the list of users from the API.
  it('should handle errors when fetching the list of users from the API', async () => {
    jest.spyOn(global, 'fetch').mockRejectedValueOnce(new Error('API Error'));

    render(<App />);

    await waitFor(() => {
      const error = screen.getByText(/Error/i);
      expect(error).toBeInTheDocument();
    });
  });

  // Renders a list of existing users with their names.
  it('should render a list of existing users with their names', async () => {
    const mockUsers = [
      { id: 1, name: 'John' },
      { id: 2, name: 'Jane' },
    ];

    jest.spyOn(global, 'fetch').mockResolvedValueOnce({
      json: jest.fn().mockResolvedValueOnce(mockUsers),
    });

    render(<App />);

    await waitFor(() => {
      const userList = screen.getByRole('list');
      expect(userList.children.length).toBe(mockUsers.length);
    });
  });
});
